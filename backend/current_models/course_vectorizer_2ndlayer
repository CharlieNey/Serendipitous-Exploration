import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

model = SentenceTransformer('all-MiniLM-L6-v2')

input_file = "data/courses_comparison.csv"  # Update file path
output_file = "data/courses_output.csv"

df = pd.read_csv(input_file)

# Function to find the most similar words between two descriptions
def find_most_similar_word(desc1, desc2):
    if pd.isna(desc1) or pd.isna(desc2):
        return None  # Handle missing values

    # Tokenize descriptions into words
    words1 = desc1.split()
    words2 = desc2.split()

    # Encode words using BERT
    embeddings1 = model.encode(words1)
    embeddings2 = model.encode(words2)

    # Compute cosine similarity matrix
    similarity_matrix = cosine_similarity(embeddings1, embeddings2)

    # Find the most similar word pair
    word1_idx, word2_idx = np.unravel_index(similarity_matrix.argmax(), similarity_matrix.shape)
    most_similar_word1 = words1[word1_idx]
    most_similar_word2 = words2[word2_idx]
    
    return f"{most_similar_word1} - {most_similar_word2}"  # Return word pair

# Apply function to each row
df["most_similar_word"] = df.apply(lambda row: find_most_similar_word(row["description1"], row["description2"]), axis=1)

# Save to a new CSV file
df.to_csv(output_file, index=False)

print(f"Processed data saved to {output_file}")
